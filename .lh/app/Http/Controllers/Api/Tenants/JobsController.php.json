{
    "sourceFile": "app/Http/Controllers/Api/Tenants/JobsController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1699949478430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1699949478430,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Api\\Tenants;\n\nuse App\\Helpers\\Helper;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\DB;\nuse App\\Exceptions\\CustomException;\nuse App\\Http\\Resources\\Tenants\\Job;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Support\\Facades\\Auth;\nuse App\\Contracts\\Tenants\\JobContract;\nuse App\\Http\\Resources\\Tenants\\JobCollection;\nuse App\\Http\\Requests\\Tenants\\StoreJobRequest;\nuse App\\Http\\Requests\\Tenants\\UpdateJobRequest;\nuse App\\Http\\Resources\\Tenants\\ProfileResource;\nuse App\\Http\\Requests\\Tenants\\StoreATS_ScoreRequest;\nuse App\\Http\\Resources\\Tenants\\DepartmentCollection;\nuse App\\Http\\Resources\\Tenants\\ProfileHeaderResource;\nuse App\\Http\\Resources\\Tenants\\AnswerResourceCollection;\nuse App\\Http\\Requests\\Tenants\\StoreJobQualificationRequest;\nuse App\\Http\\Resources\\Tenants\\RequirementResourceCollection;\nuse App\\Http\\Resources\\Tenants\\ApplicantJobResourceCollection;\nuse App\\Http\\Resources\\Tenants\\JobApplicantResourceCollection;\nuse App\\Http\\Requests\\Tenants\\Candidate\\UpdateApplicantProfileRequest;\nuse App\\Http\\Resources\\Tenants\\CandidateAppliedJobsResourceCollection;\nuse App\\Models\\Tenants\\ApplicantRequirementAnswer;\nuse App\\Models\\Tenants\\JobQualification;\n\nclass JobsController extends Controller\n{\n    public $job;\n\n    public function __construct(JobContract $job)\n    {\n        $this->job = $job;\n    }\n    /**\n     * Display a listing of the resource.\n     */\n    public function index()\n    {\n        try {\n            $job = $this->job->index();\n            $job = new JobCollection($job);\n            return $this->successResponse(\"Successfully\", $job);\n        } catch (CustomException $th) {\n            return $this->failedResponse($th->getMessage());\n        } catch (\\Throwable $th) {\n            Helper::logMessage(\"job index\", 'none', $th->getMessage());\n            return $this->failedResponse($th->getMessage());\n        }\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     */\n    public function store(StoreJobRequest $request)\n    {\n        try {\n            DB::beginTransaction();\n            $job = $this->job->store($request->prepareRequest());\n            $job = new Job($job);\n            DB::commit();\n            return $this->successResponse(\"Job Added Successfully\", $job);\n        } catch (CustomException $th) {\n            return $this->failedResponse($th->getMessage());\n        } catch (\\Throwable $th) {\n            Helper::logMessage(\"job index\", $request->input(), $th->getMessage());\n            return $this->failedResponse($th->getMessage());\n        }\n    }\n    public function show(string $id)\n    {\n        try {\n            $job = $this->job->show($id);\n            $job = new Job($job);\n            return $this->successResponse( \"Job Found Successfully\", $job);\n        } catch (CustomException $th) {\n            return $this->failedResponse($th->getMessage());\n        } catch (\\Throwable $th) {\n            helper::logMessage(\"job show\", 'id ='.$id, $th->getMessage());\n            return $this->failedResponse($th->getMessage());\n        }\n    }\n\n    /**\n     * Display the specified resource.\n     */\n    public function questionList(Request $request)\n    {\n        try {\n            $job = $this->job->questionList($request);\n            $job = new DepartmentCollection($job);\n            return $this->successResponse(\"Department Records Found Successfully\", $job);\n        } catch (CustomException $th) {\n            return $this->failedResponse($th->getMessage());\n        } catch (\\Throwable $th) {\n            Helper::logMessage(\"job show\", $request->input(), $th->getMessage());\n            return $this->failedResponse($th->getMessage());\n        }\n    }\n    public function job_qualification(StoreJobQualificationRequest $request, $job_id)\n    {\n        try {\n            DB::beginTransaction();\n            $this->job->job_qualification($request->all(), $job_id);\n            DB::commit();\n            return $this->okResponse(\"Job Qualification Records Save Successfully\");\n        } catch (CustomException $th) {\n            return $this->failedResponse($th->getMessage());\n        } catch (\\Throwable $th) {\n            Helper::logMessage(\"job_qualification\",  $request->all(), $th->getMessage());\n            return $this->failedResponse($th->getMessage());\n        }\n    }\n    public function get_country_against_job($job_id)\n    {\n        try {\n            $data = $this->job->get_country_against_job($job_id);\n            return $this->successResponse(\"Jobs Country Found Successfully\", $data);\n        } catch (CustomException $th) {\n            return $this->failedResponse($th->getMessage());\n        } catch (\\Throwable $th) {\n            Helper::logMessage(\"getJobApplicants\", 'none', $th->getMessage());\n            return $this->failedResponse($th->getMessage());\n        }\n    }\n\n    /**\n     * Update the specified resource in storage.\n     */\n    public function update(UpdateJobRequest $request, string $id)\n    {\n        try {\n            DB::beginTransaction();\n            $job = $this->job->update($request->prepareRequest(), $id);\n            $job = new Job($job);\n            DB::commit();\n            return $this->successResponse(\"Job Updated Successfully\", $job);\n        } catch (CustomException $th) {\n            return $this->failedResponse($th->getMessage());\n        } catch (\\Throwable $th) {\n            Helper::logMessage(\"job update (id = )\" . $id, $request->input(), $th->getMessage());\n            return $this->failedResponse($th->getMessage());\n        }\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     */\n    public function destroy(string $id)\n    {\n        try {\n            DB::beginTransaction();\n            $this->job->delete($id);\n            DB::commit();\n            return $this->okResponse(\"Job Deleted Successfully\");\n        } catch (CustomException $th) {\n            return $this->failedResponse($th->getMessage());\n        } catch (\\Throwable $th) {\n            Helper::logMessage(\"job destroy\", 'id = ' . $id, $th->getMessage());\n            return $this->failedResponse($th->getMessage());\n        }\n    }\n\n    public function requirements($id)\n    {\n        try {\n            $requirements = $this->job->requirements($id);\n            $requirements = new RequirementResourceCollection($requirements);\n            return $this->successResponse(\"Success\", $requirements);\n        } catch (CustomException $th) {\n            return $this->failedResponse($th->getMessage());\n        } catch (\\Throwable $th) {\n            Helper::logMessage(\"job requirements\", 'id = ' . $id, $th->getMessage());\n            return $this->failedResponse($th->getMessage());\n        }\n    }\n    public function getJobs(Request $request)\n    {\n        try {\n            $data = $this->job->getApplicantJobs($request);\n            $data = new ApplicantJobResourceCollection($data);\n            return $this->successResponse(\"Jobs Listing\", $data);\n        } catch (CustomException $th) {\n            return $this->failedResponse($th->getMessage());\n        } catch (\\Throwable $th) {\n            Helper::logMessage(\"getJobs Listing\", 'none', $th->getMessage());\n            return $this->failedResponse($th->getMessage());\n        }\n    }\n\n    public function getJobApplicants(Request $request, $job_id)\n    {\n        try {\n            $data = $this->job->getJobApplicant($request->all(), $job_id);\n            $data = new JobApplicantResourceCollection($data['applicants'], $data);\n            return $this->successResponse(\"Jobs Applicant Listing\", $data);\n        } catch (CustomException $th) {\n            return $this->failedResponse($th->getMessage());\n        } catch (\\Throwable $th) {\n            Helper::logMessage(\"getJobApplicants\", 'none', $th->getMessage());\n            return $this->failedResponse($th->getMessage());\n        }\n    }\n    public function candidateAppliedJobs()\n    {\n        try {\n            $user_id = Auth::id();\n            $data = $this->job->candidateAppliedJobs($user_id);\n            $data = new CandidateAppliedJobsResourceCollection($data);\n            return $this->successResponse(\"Applied Jobs Listing\", $data);\n        } catch (CustomException $th) {\n            return $this->failedResponse($th->getMessage());\n        } catch (\\Throwable $th) {\n            Helper::logMessage(\"getJobApplicants\", 'none', $th->getMessage());\n            return $this->failedResponse($th->getMessage());\n        }\n    }\n    public function jobApplicantProfileStatus(Request $request, $applicant_id, $job_id)\n    {\n        try {\n            $data = $this->job->jobApplicantProfileStatus($request, $applicant_id, $job_id);\n            return $this->successResponse(\"Status Update Successfully\", $data);\n        } catch (CustomException $th) {\n            return $this->failedResponse($th->getMessage());\n        } catch (\\Throwable $th) {\n            Helper::logMessage(\"getJobApplicants\", 'none', $th->getMessage());\n            return $this->failedResponse($th->getMessage());\n        }\n    }\n    public function jobApplicantQuestionAnswer($applicant_id, $job_id)\n    {\n        try {\n            $data = $this->job->jobApplicantQuestionAnswer($applicant_id, $job_id);\n            $data = new AnswerResourceCollection($data);\n            return $this->successResponse(\"Record Found Successfully\", $data);\n        } catch (CustomException $th) {\n            return $this->failedResponse($th->getMessage());\n        } catch (\\Throwable $th) {\n            Helper::logMessage(\"getJobApplicants\", 'none', $th->getMessage());\n            return $this->failedResponse($th->getMessage());\n        }\n    }\n    public function jobApplicantProfileHeader($applicant_id)\n    {\n        try {\n            $data = $this->job->jobApplicantProfileHeader($applicant_id);\n            $data = new ProfileHeaderResource($data);\n            return $this->successResponse(\"Jobs Applicant Listing\", $data);\n        } catch (CustomException $th) {\n            return $this->failedResponse($th->getMessage());\n        } catch (\\Throwable $th) {\n            Helper::logMessage(\"jobApplicantProfileHeader\", 'none', $th->getMessage());\n            return $this->failedResponse($th->getMessage());\n        }\n    }\n    public function profile($user_id)\n    {\n        try {\n            $data = $this->job->profile($user_id);\n            $data = new ProfileResource($data);\n            return $this->successResponse(\"Applicant Profile\", $data);\n        } catch (CustomException $th) {\n            return $this->failedResponse($th->getMessage());\n        } catch (\\Throwable $th) {\n            Helper::logMessage(\"jobApplicantProfile\", 'none', $th->getMessage());\n            return $this->failedResponse($th->getMessage());\n        }\n    }\n    public function profileUpdate(UpdateApplicantProfileRequest $request, $user_id)\n    {\n        try {\n            DB::beginTransaction();\n            $data = $this->job->profileUpdate($request->all(), $user_id);\n            DB::commit();\n            $data = new ProfileResource($data);\n            return $this->successResponse(\"Profile Update\", $data);\n        } catch (CustomException $th) {\n            return $this->failedResponse($th->getMessage());\n        } catch (\\Throwable $th) {\n            Helper::logMessage(\"jobApplicantProfile\", 'none', $th->getMessage());\n            return $this->failedResponse($th->getMessage());\n        }\n    }\n    public function ATS_Score(StoreATS_ScoreRequest $request, $job_id): \\Illuminate\\Http\\JsonResponse\n    {\n        try {\n            DB::beginTransaction();\n            $this->job->ATS_Score($request, $job_id);\n            //            $data = new ATS_ScoreResource($data);\n            DB::commit();\n            return $this->okResponse(\"Jobs ATS Score Save Successfully\");\n        } catch (CustomException $th) {\n            return $this->failedResponse($th->getMessage());\n        } catch (\\Throwable $th) {\n            Helper::logMessage(\"ATS_Score\", 'none', $th->getMessage());\n            return $this->failedResponse($th->getMessage());\n        }\n    }\n\n    public function getJobQualifications(Request $request, $job_id, $applicant_id)\n    {\n        $qualification_answers = ApplicantRequirementAnswer::with(['requirement'])->where('job_id', $job_id)->where('applicant_id', $applicant_id)->get();\n\n        $data = [];\n        foreach ($qualification_answers as $answer) {\n            $criteria = JobQualification::where('job_id', $job_id)->where('requirement_id', $answer->requirement_id)->first();\n            $data[] = [\n                'question' => $answer->requirement->name,\n                'answer' => $answer->answer,\n                'criteria_value' => optional($criteria)->value,\n                'criteria_operator' => optional($criteria)->operator\n            ];\n        }\n\n        return $this->successResponse(\"OK\", $data);\n    }\n}\n"
        }
    ]
}